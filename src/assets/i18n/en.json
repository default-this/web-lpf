{
  "appName": "webPoweredApp",
  "appTitleTemplate": "{ pageTitle } | { appName }",
  "pageNotFound": "Page not found",
  "hubListHubIsNotConnected": "disconnected",
  "discoverHub": "Discover hub",
  "bluetoothIsNotAvailable": "Bluetooth is not available",
  "uploadFileButtonTitle": "Upload",
  "uploadFileDialogTitle": "Select a file",
  "confirmationDialog": {
    "defaultTitle": "Are you sure?",
    "defaultConfirmButtonTitle": "Confirm",
    "defaultCancelButtonTitle": "Cancel"
  },
  "bluetoothUnavailable": {
    "message": "It appears that your browser does not support the Web Bluetooth API",
    "link": "For more information, please refer to"
  },
  "nav": {
    "controllersList": "Controllers",
    "hubsList": "Hubs",
    "controlSchemesList": "Control schemes",
    "navMenuAriaLabel": "Menu",
    "aboutPageButton": "About",
    "settingsPageButton": "Settings"
  },
  "pageTitle": {
    "bindingCreate": "{ controlSchemeName } - Create binding",
    "bindingEdit": "{ controlSchemeName } - Edit binding",
    "controlSchemesList": "Control schemes",
    "controlSchemeView": "{ controlSchemeName }",
    "controlSchemePortEdit": "{ controlSchemeName } - {hubName}, port {portId}",
    "controllerList": "Controllers",
    "controllerView": "{ controllerName } controller settings",
    "hubEdit": "{ hubName } settings",
    "hubList": "Hubs",
    "hubView": "{ hubName }",
    "notFound": "Page not found",
    "bluetoothUnavailable": "Bluetooth is not available",
    "about": "About",
    "settings": "Settings"
  },
  "settings": {
    "theme": "Theme",
    "themeSystem": "System",
    "themeLight": "Light",
    "themeDark": "Dark",
    "language": "Language",
    "createStateBackupButtonTitle": "Create backup",
    "restoreStateFromBackupButtonTitle": "Restore from backup",
    "restoreStateFromBackupDialogTitle": "Restore from backup",
    "restoreStateFromBackupDialogDescription": "Restoring from backup will replace the current settings, erasing all previous data, and will restart the application. This action cannot be undone.",
    "restoreStateFromBackupDialogConfirmButtonTitle": "Restore",
    "restoreStateFromBackupDialogCancelButtonTitle": "Cancel",
    "restoreStateFromBackupDialogFileCorrupted": "Backup file is corrupted",
    "resetStateButtonTitle": "Reset",
    "resetStateDialogTitle": "Reset app",
    "resetStateDialogDescription": "Resetting the app will erase all data and restart the application. This action cannot be undone.",
    "resetStateDialogConfirmButtonTitle": "Reset",
    "resetStateDialogCancelButtonTitle": "Cancel"
  },
  "language": {
    "en": "English",
    "ru": "Русский"
  },
  "hub": {
    "hub": "Hub",
    "edit": "Edit",
    "name": "Hub name",
    "save": "Save",
    "cancel": "Cancel",
    "view": "View",
    "disconnect": "Disconnect",
    "forget": "Forget",
    "forgetHubLabel": "Forget hub { name }",
    "forgerHubNotificationConfirmationTitle": "Are you sure you want to forget this hub?",
    "forgerHubNotificationConfirmationContent": "Some control schemes may stop working. You can revert this action by connecting the hub again",
    "forgerHubNotificationConfirmationConfirmButtonTitle": "Forget",
    "forgerHubNotificationConfirmationCancelButtonTitle": "Cancel",
    "noneConnected": "There are no connected hubs yet",
    "notConnected": "disconnected",
    "isNotConnected": "Hub ''{name}'' is not connected",
    "isNotFound": "Hub is not found",
    "connected": "Hub {name} connected",
    "disconnected": "Hub {name} disconnected",
    "batteryLevel": "Battery: {batteryLevel}%",
    "batteryLevelUnknown": "Battery level unknown",
    "rssiLevel": "RSSI: {rssi}",
    "rssiLevelUnknown": "RSSI unknown",
    "buttonStateTitle": "Button state",
    "buttonState": "Hub button state: {isButtonPressed, select, true {pressed} other {released}}",
    "port": "Port {portId}",
    "unknownHub": "Unknown hub ''{ hubId }''",
    "hubNameErrorMinLength": "Hub name must be at least { requiredLength } character long",
    "hubNameErrorMaxLength": "Hub name must be no more than { requiredLength } characters long",
    "hubNameErrorPattern": "Hub name can only contain letters, numbers, spaces and the following characters: ''-'' ''_'' ''.''",
    "hubNameSetError": "An error occurred while setting hub name"
  },
  "hubTypes": {
    "boost": "Boost Hub",
    "weDo": "WeDo Hub",
    "duploTrain": "Duplo Train",
    "twoPortHub": "Two-port Hub",
    "twoPortHandset": "Two-port Handset",
    "unknown": "Unknown hub type",
    "fourPortHub": "Four-port Hub"
  },
  "controlScheme": {
    "newSchemeDialogTitle": "Create new control scheme",
    "newSchemeDialogSubmitButtonTitle": "Create",
    "newSchemeDialogCancelButtonTitle": "Cancel",
    "newSchemeDialogNameField": "Scheme name",
    "newSchemeDialogDefaultName": "New scheme",
    "notFound": "Scheme is not found",
    "noControlSchemes": "There are no control schemes yet",
    "bindingsListEmptyNotification": "There are no bindings in this scheme yet",
    "create": "Create",
    "cancelEdit": "Cancel",
    "addBinding": "Add binding",
    "deleteBinding": "Delete",
    "saveEdited": "Save",
    "saveCreated": "Save",
    "cancelCreate": "Cancel",
    "cancelAddBinding": "Cancel",
    "createBindingWaitingForInputTitle": "Waiting for input",
    "createBindingWaitingForInputContent": "Move the controller's stick or press a button",
    "view": "View",
    "edit": "Edit",
    "editNameButtonTitle": "Edit control scheme name",
    "editNameSaveButtonTitle": "Save",
    "editNameCancelButtonTitle": "Cancel",
    "run": "Start",
    "runFailed": "Failed to start",
    "runBlockerSchemeDoesNotExist": "Control scheme does not exist",
    "runBlockerAlreadyRunning": "Control scheme is already running",
    "runBlockerBindingsDoesNotExist": "Control scheme does not have any bindings",
    "runBlockerSomeControllersAreNotConnected": "Some controllers are not connected",
    "runBlockerSomeIosAreNotConnected": "Some IOs are not connected",
    "runBlockerSomeHubsAreNotConnected": "Some hubs are not connected",
    "runBlockerSomeIosHaveNoRequiredCapabilities": "Some IOs do not have required capabilities",
    "stop": "Stop",
    "delete": "Delete",
    "export": "Export",
    "exportDialogTitle": "''{ name }'' export string",
    "exportDialogCopyButtonTitle": "Copy",
    "exportDialogCloseButtonTitle": "Close",
    "exportStringCopiedNotification": "Export string copied to clipboard",
    "import": "Import",
    "importDialogTitle": "Import control scheme",
    "importDialogDescription": "Paste control scheme export string",
    "importDialogImportButtonTitle": "Import",
    "importDialogCancelButtonTitle": "Cancel",
    "importDataInvalid": "Invalid control scheme export string",
    "importSuccessNotification": "Control scheme ''{ name }'' imported successfully",
    "deleteSchemeConfirmationTitle": "Are you sure you want to delete ''{name}'' scheme?",
    "deleteSchemeConfirmationContent": "This action cannot be undone",
    "deleteSchemeConfirmationConfirmButtonTitle": "Delete",
    "deleteSchemeConfirmationCancelButtonTitle": "Cancel",
    "deleteBindingConfirmationTitle": "Are you sure you want to delete this binding?",
    "deleteBindingConfirmationContent": "This action cannot be undone",
    "deleteBindingConfirmationConfirmButtonTitle": "Delete",
    "deleteBindingConfirmationCancelButtonTitle": "Cancel",
    "nameField": "Control scheme name",
    "bindingAssignControlButtonTitle": "Assign control",
    "bindingInputIsNotAssigned": "Not assigned",
    "bindingInputControlUnassignButtonTitle": "Unassign control",
    "bindToAnotherInputButtonTitle": "Rebind",
    "bindingOutputSectionPortLabel": "Port",
    "bindingOutputSectionOperationModeLabel": "Operation mode",
    "bindingOutputSectionOperationModeValue": "{ name }",
    "expandCollapseHub": "Expand/collapse hub {name}",
    "expandCollapseIo": "Expand/collapse port {portName}",
    "controllerIsNotConnectedLabel": "Controller is not connected",
    "cannotCreateBinding": "Cannot create binding - there are no controllable IOs present",
    "noDeviceConnected": "No device connected",
    "unsupportedBindingType": "{ bindingType } (unsupported)",
    "ioCapabilitiesMismatch": "Attached device does not have required capabilities",
    "outputConfigurationNotRequired": "No configuration required",
    "runningDetailsIsRunningNotification": "Control scheme is running",
    "outputSpeedControlTitle": "Speed",
    "outputPowerControlTitle": "Power",
    "outputInvertControlTitle": "Invert",
    "outputEndStateControlTitle": "End state",
    "accelerationTimeMs": "Acceleration time",
    "decelerationTimeMs": "Deceleration time",
    "profileTimingPostfix": "ms",
    "useAccelerationProfile": "Use acceleration profile",
    "useDecelerationProfile": "Use deceleration profile",
    "portConfigNotFound": "Port configuration is not found",
    "portConfigTitle": "Port configuration",
    "portConfigSubtitle": "Hub ''{hubName}'', port {portId}",
    "portConfigSaveButtonTitle": "Save",
    "portConfigCancelButtonTitle": "Cancel",
    "newSchemeDialogNameRequired": "Scheme name is required",
    "newSchemeDialogNameUniqueness": "Scheme with this name already exists",
    "inputGain": "Input gain",
    "inputGainLinear": "None",
    "inputGainLogarithmic": "Logarithmic",
    "inputGainExponential": "Exponential",
    "fullControllerInputName": "{controllerName} / {inputName}",
    "controllerInputNameWithPort": "Port {portId} / {inputName}",
    "loopingModeTitle": "Looping mode",
    "loopingModeNone": "None",
    "loopingModeWrap": "Wrap",
    "loopingModeMirror": "Mirror",
    "bindingSectionOutputTitle": "Output",
    "bindingSectionInputTitle": "Input",
    "bindingSectionConfigTitle": "Settings",
    "menu": "Menu",
    "outputSpeed": "Speed",
    "outputPower": "Power",
    "inputActions": {
      "servo": "Servo",
      "brake": "Brake",
      "accelerate": "Accelerate",
      "step": "Step",
      "setAngle": "Set angle",
      "nextLevel": "Next",
      "prevLevel": "Prev",
      "reset": "Reset"
    },
    "setSpeedBinding": {
      "operationMode": "Set speed",
      "accelerationInputGainTitle": "Acceleration input gain",
      "outputSpeed": "Max speed",
      "taskSummary": "Speed: { speed }%",
      "brakeTaskSummary": "Brake"
    },
    "servoBinding": {
      "operationMode": "Servo",
      "outputCenterOffset": "Center offset (°)",
      "outputAngleRange": "Servo range (°)",
      "calibrateOnStart": "Auto-calibrate on start",
      "calibrate": "Calibrate",
      "calibrationIsInProgress": "Servo calibration is in progress",
      "calibrationError": "An error occurred during servo calibration",
      "calibrationCancel": "Cancel",
      "readServoCenterFromPort": "Read servo center from port",
      "readServoRangeFromPort": "Read servo range from port",
      "taskSummary": "Servo: { angle }°"
    },
    "stepperBinding": {
      "operationMode": "Stepper",
      "outputDegree": "Angle (°)",
      "taskSummary": "Step: { degree }°"
    },
    "setAngleBinding": {
      "operationMode": "Set angle",
      "outputAngle": "Target angle (°)",
      "readAngleFromPort": "Read angle from port",
      "taskSummary": "Set angle: { angle }°"
    },
    "trainControlBinding": {
      "operationMode": "Train control",
      "level": "Speed level { level } (%)",
      "outputLevelAdd": "Add speed level",
      "outputLevelRemove": "Remove level",
      "taskSummary": "Train, level {level} ({speedPercent}%){ isLooping, select, true { (mirror)} other {}}"
    },
    "gearboxControlBinding": {
      "operationMode": "Gearbox control",
      "angleLevel": "Angle level { level } (°)",
      "readAngleFromPort": "Read angle from port",
      "outputAngleLevelAdd": "Add level",
      "outputAngleLevelRemove": "Remove level",
      "taskSummary": "Gearbox, level {level} ({angle}°){ isLooping, select, true { (mirror)} other {}}"
    },
    "widgets": {
      "addWidgetButtonTitle": "Add widget",
      "addWidgetDialog": {
        "title": "Add Widget",
        "selectWidgetType": "Widget type",
        "saveButton": "Save",
        "cancelButton": "Cancel"
      },
      "voltage": {
        "name": "Voltage",
        "connectionInfo": "{hubName}:{portName} - {ioName}"
      }
    }
  },
  "widgets": {
    "deleteButtonTitle": "Delete",
    "editButtonTitle": "Edit"
  },
  "motorServoEndState": {
    "float": "Float",
    "hold": "Hold",
    "brake": "Brake"
  },
  "about": {
    "title": "About",
    "disclaimerTitle": "Disclaimer",
    "legalNotice": "LEGO® is a trademark of the LEGO Group of companies which does not sponsor, authorize or endorse this app.",
    "licenseTitle": "License",
    "licenseText": "MIT License",
    "sourcesTitle": "Sources",
    "githubTitle": "webPoweredApp GitHub",
    "githubApiTitle": "rxPoweredUp GitHub",
    "versionTitle": "Version"
  },
  "io": {
    "hardwareRevision": "Hardware Revision",
    "softwareRevision": "Software Revision",
    "ioInputCapabilities": "Input Capabilities",
    "ioOutputCapabilities": "Output Capabilities",
    "ioCapabilitiesEmpty": "None",
    "ioTypeMotor": "Motor",
    "ioTypeSystemTrainMotor": "System Train Motor",
    "ioTypeButton": "Button",
    "ioTypeLedLight": "LED Light",
    "ioTypeVoltage": "Voltage Sensor",
    "ioTypeCurrent": "Current Sensor",
    "ioTypePiezoTone": "Piezo Tone",
    "ioTypeRgbLight": "RGB Light",
    "ioTypeExternalTiltSensor": "External Tilt Sensor",
    "ioTypeMotionSensor": "Motion Sensor",
    "ioTypeVisionSensor": "Vision Sensor",
    "ioTypeExternalMotorWithTacho": "External Motor with Tacho",
    "ioTypeInternalMotorWithTacho": "Internal Motor with Tacho",
    "ioTypeInternalTilt": "Internal Tilt",
    "ioTypeLargeTechnicMotor": "Large Technic Motor",
    "ioTypeXLargeTechnicMotor": "XLarge Technic Motor",
    "ioTypeMediumTechnicAngularMotor": "Medium Technic Angular Motor",
    "ioTypeLargeTechnicAngularMotor": "Large Technic Angular Motor",
    "ioTypeHandsetButtonGroup": "Handset Button Group",
    "ioTypeAccelerometerSensor": "Accelerometer Sensor",
    "ioTypeGyroscopeSensor": "Gyroscope Sensor",
    "ioTypeTiltSensor": "Tilt Sensor",
    "ioTypeTemperatureSensor": "Temperature Sensor",
    "ioTypeGestureSensor": "Gesture Sensor",
    "ioIsNotConnectedInlineNotification": "disconnected",
    "ioTypeMismatchNotification": "IO type mismatch, expected ''{expectedType} HW/{expectedHardwareRevision} SW/{expectedSoftwareRevision}''",
    "unknownIoType": "Unknown device type",
    "ioSynchronizableTitle": "Synchronizable"
  },
  "controller": {
    "detectControllerTip": "To connect a controller, press any button on it or move any stick",
    "unknownController": "Unknown controller",
    "noControllerConnected": "No controller detected",
    "isNotConnectedInlineNotification": "disconnected",
    "keyboardControllerType": "Keyboard",
    "gamepadControllerType": "Gamepad",
    "controllerDiscoveredNotification": "Discovered new controller: { name }",
    "controllerConnectedNotification": "{ name } controller connected",
    "controllerDisconnectedNotification": "{ name } controller disconnected",
    "ignoreControllerTitle": "Ignore controller",
    "activeZone": "Active zone",
    "activationThreshold": "Activation threshold",
    "activationThresholdHint": "The value at which the input is considered activated for button-controlled bindings",
    "trim": "Input trimming",
    "rawInput": "input",
    "output": "output",
    "invert": "Invert input",
    "negativeValuesCanActivate": "Negative values can activate",
    "ignoreInputControlTitle": "Ignore input",
    "inputIsIgnored": "Input is ignored",
    "connectedControllers": "Connected controllers:",
    "controllerNotFound": "Controller is not found",
    "controllerConnectionState": "Connection state:",
    "controllerType": "Type:",
    "controllerConnectionStateConnected": "Connected",
    "controllerConnectionStateDisconnected": "Disconnected",
    "controllerSettingsSection": "Settings",
    "controllerTypeHub": "Hub",
    "controllerTypeGamepad": "Gamepad",
    "controllerTypeKeyboard": "Keyboard",
    "isActivatedValueTrue": "Activation zone reached",
    "isActivatedValueFalse": "Activation zone not reached",
    "resetInputSettingsToDefault": "Reset to default",
    "forget": "Forget",
    "forgetButtonLabel": "Forget controller { name }",
    "forgetControllerDialogTitle": "Are you sure you want to forget this controller?",
    "forgetControllerDialogDescription": "Some control schemes may stop working. You can revert this action by reconnecting the controller; however, controller settings will be lost.",
    "forgetControllerDialogConfirmButtonTitle": "Forget",
    "forgetControllerDialogCancelButtonTitle": "Cancel"
  },
  "controllerProfiles": {
    "buttonState": "{ value, select, 1 {Pressed} other {Released} }",
    "axisState": "Position: { value }",
    "genericGamepad": {
      "name": "Generic gamepad",
      "axis": "Axis {inputId}",
      "button": "Button {inputId}"
    },
    "dualshock": {
      "name": "Dualshock",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "r2Trigger": "R2 trigger",
      "l2Trigger": "L2 trigger",
      "buttonCross": "Cross button",
      "buttonSquare": "Square button",
      "buttonTriangle": "Triangle button",
      "buttonCircle": "Circle button",
      "l1Trigger": "L1 trigger",
      "r1Trigger": "R1 trigger",
      "buttonShare": "Share",
      "buttonOptions": "Options",
      "leftStickPress": "L3 left stick press",
      "rightStickPress": "R3 right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right",
      "buttonPs": "PS",
      "buttonTouchpadPress": "Touchpad press"
    },
    "xbox360": {
      "name": "Xbox 360",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "lTrigger": "LT",
      "rTrigger": "RT",
      "buttonA": "A button",
      "buttonB": "B button",
      "buttonX": "X button",
      "buttonY": "Y button",
      "lBumper": "LB",
      "rBumper": "RR",
      "buttonShare": "Share",
      "buttonMenu": "Menu",
      "leftStickPress": "Left stick press",
      "rightStickPress": "Right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right"
    },
    "joycon": {
      "r-name": "Joy-Con (R)",
      "l-name": "Joy-Con (L)",
      "combined": "Joy-Con (L+R)",
      "leftStickXAxis": "Left stick X-axis",
      "leftStickYAxis": "Left stick Y-axis",
      "rightStickXAxis": "Right stick X-axis",
      "rightStickYAxis": "Right stick Y-axis",
      "zlTrigger": "ZL",
      "zrTrigger": "ZR",
      "buttonA": "A",
      "buttonB": "B",
      "buttonX": "X",
      "buttonY": "Y",
      "lBumper": "L",
      "rBumper": "R",
      "buttonMinus": "Minus",
      "buttonPlus": "Plus",
      "buttonHome": "Home",
      "buttonCapture": "Capture",
      "buttonLStick": "Left stick press",
      "buttonRStick": "Right stick press",
      "buttonDpadUp": "DPad up",
      "buttonDpadDown": "DPad down",
      "buttonDpadLeft": "DPad left",
      "buttonDpadRight": "DPad right",
      "buttonSLR": "SL (R)",
      "buttonSRR": "SR (R)",
      "buttonSLL": "SL (L)",
      "buttonSRL": "SR (L)",
      "unknownButton": "Button {inputId}",
      "stickXAxis": "Stick X-axis",
      "stickYAxis": "Stick Y-axis",
      "buttonSL": "SL",
      "buttonSR": "SR"
    },
    "keyboard": {
      "name": "Keyboard",
      "button": "Key ''{ inputId }''",
      "captureNonAlphaNumerics": "Allow use of non-alphanumeric keys for input",
      "captureNonAlphaNumericsHint": "In some scenarios, capturing non-alphanumeric keys may prevent you from using your keyboard normally. Use this option with caution."
    },
    "hub": {
      "greenButton": "Green button",
      "plusButton": "''+'' button",
      "redButton": "Red button",
      "minusButton": "''-'' button",
      "genericButton": "Button {inputId}",
      "unknownButton": "Unknown button"
    },
    "unknown": {
      "name": "{ uid }",
      "button": "Button {inputId}",
      "axis": "Axis {inputId}"
    }
  },
  "validation": {
    "required": "Required",
    "max": "Max value is { max }",
    "min": "Min value is { min }",
    "minLength": "At least { requiredLength } is required",
    "valueShouldNotBeZero": "Value should not be zero",
    "valueShouldBeInteger": "Value must be integer"
  }
}
